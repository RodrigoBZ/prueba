//  RcppExports.cpp
//
//  
//
//  Generated by using Rcpp::compileAttributes() -> do not edit by hand
//  Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393
//
//  Authors:
//  Dalia Camacho-García-Formentí
//  Rodrigo Zepeda-Tello
//
//----------------------------------------------------------------------------------------
// License: MIT
// Copyright 2018 Instituto Nacional de Salud Pública de México
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge, publish, distribute,
// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software
// is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies
// or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//----------------------------------------------------------------------------------------


#include <Rcpp.h>

using namespace Rcpp;

// adult_weight_wrapper
List adult_weight_wrapper(NumericVector bw, NumericVector ht, NumericVector age, NumericVector sex, NumericMatrix EIchange, NumericMatrix NAchange, NumericVector PAL, NumericVector pcarb_base, NumericVector pcarb, double days, bool checkValues);
RcppExport SEXP _bw_adult_weight_wrapper(SEXP bwSEXP, SEXP htSEXP, SEXP ageSEXP, SEXP sexSEXP, SEXP EIchangeSEXP, SEXP NAchangeSEXP, SEXP PALSEXP, SEXP pcarb_baseSEXP, SEXP pcarbSEXP, SEXP daysSEXP, SEXP checkValuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ht(htSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sex(sexSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type EIchange(EIchangeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type NAchange(NAchangeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type PAL(PALSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pcarb_base(pcarb_baseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pcarb(pcarbSEXP);
    Rcpp::traits::input_parameter< double >::type days(daysSEXP);
    Rcpp::traits::input_parameter< bool >::type checkValues(checkValuesSEXP);
    rcpp_result_gen = Rcpp::wrap(adult_weight_wrapper(bw, ht, age, sex, EIchange, NAchange, PAL, pcarb_base, pcarb, days, checkValues));
    return rcpp_result_gen;
END_RCPP
}
// adult_weight_wrapper_EI
List adult_weight_wrapper_EI(NumericVector bw, NumericVector ht, NumericVector age, NumericVector sex, NumericMatrix EIchange, NumericMatrix NAchange, NumericVector PAL, NumericVector pcarb_base, NumericVector pcarb, NumericVector extradata, double days, bool checkValues, bool isEnergy);
RcppExport SEXP _bw_adult_weight_wrapper_EI(SEXP bwSEXP, SEXP htSEXP, SEXP ageSEXP, SEXP sexSEXP, SEXP EIchangeSEXP, SEXP NAchangeSEXP, SEXP PALSEXP, SEXP pcarb_baseSEXP, SEXP pcarbSEXP, SEXP extradataSEXP, SEXP daysSEXP, SEXP checkValuesSEXP, SEXP isEnergySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ht(htSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sex(sexSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type EIchange(EIchangeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type NAchange(NAchangeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type PAL(PALSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pcarb_base(pcarb_baseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pcarb(pcarbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type extradata(extradataSEXP);
    Rcpp::traits::input_parameter< double >::type days(daysSEXP);
    Rcpp::traits::input_parameter< bool >::type checkValues(checkValuesSEXP);
    Rcpp::traits::input_parameter< bool >::type isEnergy(isEnergySEXP);
    rcpp_result_gen = Rcpp::wrap(adult_weight_wrapper_EI(bw, ht, age, sex, EIchange, NAchange, PAL, pcarb_base, pcarb, extradata, days, checkValues, isEnergy));
    return rcpp_result_gen;
END_RCPP
}
// adult_weight_wrapper_EI_fat
List adult_weight_wrapper_EI_fat(NumericVector bw, NumericVector ht, NumericVector age, NumericVector sex, NumericMatrix EIchange, NumericMatrix NAchange, NumericVector PAL, NumericVector pcarb_base, NumericVector pcarb, NumericVector input_EI, NumericVector input_fat, double days, bool checkValues);
RcppExport SEXP _bw_adult_weight_wrapper_EI_fat(SEXP bwSEXP, SEXP htSEXP, SEXP ageSEXP, SEXP sexSEXP, SEXP EIchangeSEXP, SEXP NAchangeSEXP, SEXP PALSEXP, SEXP pcarb_baseSEXP, SEXP pcarbSEXP, SEXP input_EISEXP, SEXP input_fatSEXP, SEXP daysSEXP, SEXP checkValuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type bw(bwSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ht(htSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sex(sexSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type EIchange(EIchangeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type NAchange(NAchangeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type PAL(PALSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pcarb_base(pcarb_baseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pcarb(pcarbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type input_EI(input_EISEXP);
    Rcpp::traits::input_parameter< NumericVector >::type input_fat(input_fatSEXP);
    Rcpp::traits::input_parameter< double >::type days(daysSEXP);
    Rcpp::traits::input_parameter< bool >::type checkValues(checkValuesSEXP);
    rcpp_result_gen = Rcpp::wrap(adult_weight_wrapper_EI_fat(bw, ht, age, sex, EIchange, NAchange, PAL, pcarb_base, pcarb, input_EI, input_fat, days, checkValues));
    return rcpp_result_gen;
END_RCPP
}
// child_weight_wrapper
List child_weight_wrapper(NumericVector age, NumericVector sex, NumericVector FFM, NumericVector FM, NumericMatrix input_EIntake, double days, bool checkValues);
RcppExport SEXP _bw_child_weight_wrapper(SEXP ageSEXP, SEXP sexSEXP, SEXP FFMSEXP, SEXP FMSEXP, SEXP input_EIntakeSEXP, SEXP daysSEXP, SEXP checkValuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sex(sexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type FFM(FFMSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type FM(FMSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type input_EIntake(input_EIntakeSEXP);
    Rcpp::traits::input_parameter< double >::type days(daysSEXP);
    Rcpp::traits::input_parameter< bool >::type checkValues(checkValuesSEXP);
    rcpp_result_gen = Rcpp::wrap(child_weight_wrapper(age, sex, FFM, FM, input_EIntake, days, checkValues));
    return rcpp_result_gen;
END_RCPP
}
// intake_reference_wrapper
NumericMatrix intake_reference_wrapper(NumericVector age, NumericVector sex, NumericVector FFM, NumericVector FM, double days);
RcppExport SEXP _bw_intake_reference_wrapper(SEXP ageSEXP, SEXP sexSEXP, SEXP FFMSEXP, SEXP FMSEXP, SEXP daysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sex(sexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type FFM(FFMSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type FM(FMSEXP);
    Rcpp::traits::input_parameter< double >::type days(daysSEXP);
    rcpp_result_gen = Rcpp::wrap(intake_reference_wrapper(age, sex, FFM, FM, days));
    return rcpp_result_gen;
END_RCPP
}
// mass_reference_wrapper
List mass_reference_wrapper(NumericVector age, NumericVector sex);
RcppExport SEXP _bw_mass_reference_wrapper(SEXP ageSEXP, SEXP sexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type age(ageSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sex(sexSEXP);
    rcpp_result_gen = Rcpp::wrap(mass_reference_wrapper(age, sex));
    return rcpp_result_gen;
END_RCPP
}
// EnergyBuilder
NumericMatrix EnergyBuilder(NumericMatrix Energy, NumericVector Time, std::string interpol);
RcppExport SEXP _bw_EnergyBuilder(SEXP EnergySEXP, SEXP TimeSEXP, SEXP interpolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Energy(EnergySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Time(TimeSEXP);
    Rcpp::traits::input_parameter< std::string >::type interpol(interpolSEXP);
    rcpp_result_gen = Rcpp::wrap(EnergyBuilder(Energy, Time, interpol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bw_adult_weight_wrapper", (DL_FUNC) &_bw_adult_weight_wrapper, 11},
    {"_bw_adult_weight_wrapper_EI", (DL_FUNC) &_bw_adult_weight_wrapper_EI, 13},
    {"_bw_adult_weight_wrapper_EI_fat", (DL_FUNC) &_bw_adult_weight_wrapper_EI_fat, 13},
    {"_bw_child_weight_wrapper", (DL_FUNC) &_bw_child_weight_wrapper, 7},
    {"_bw_intake_reference_wrapper", (DL_FUNC) &_bw_intake_reference_wrapper, 5},
    {"_bw_mass_reference_wrapper", (DL_FUNC) &_bw_mass_reference_wrapper, 2},
    {"_bw_EnergyBuilder", (DL_FUNC) &_bw_EnergyBuilder, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_bw(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
